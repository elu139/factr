#!/usr/bin/env python3
"""
Session 3 Testing Script
Tests all the new reverse search and metadata analysis features
"""

import asyncio
import httpx
import json
from datetime import datetime

# Test endpoints
BASE_URL = "http://localhost:8000"

async def test_session3_features():
    """Test all Session 3 features"""
    
    print("üöÄ Testing factr.ai Session 3 Features")
    print("=" * 50)
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        
        # Test 1: Health check with Session 3 capabilities
        print("\n1. Testing enhanced health check...")
        try:
            response = await client.get(f"{BASE_URL}/health")
            if response.status_code == 200:
                health_data = response.json()
                print(f"‚úÖ Health check passed")
                print(f"   Session: {health_data.get('session', 'Unknown')}")
                print(f"   Detection methods: {health_data.get('performance_metrics', {}).get('total_detection_methods', 'Unknown')}")
                print(f"   Search engines: {health_data.get('performance_metrics', {}).get('search_engines_integrated', 'Unknown')}")
            else:
                print(f"‚ùå Health check failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Health check error: {e}")
        
        # Test 2: System capabilities
        print("\n2. Testing capabilities endpoint...")
        try:
            response = await client.get(f"{BASE_URL}/capabilities")
            if response.status_code == 200:
                capabilities = response.json()
                print(f"‚úÖ Capabilities endpoint working")
                print(f"   Version: {capabilities.get('factr_ai_version', 'Unknown')}")
                detection_methods = capabilities.get('detection_methods', {})
                print(f"   Detection methods available: {len(detection_methods)}")
                for method, details in list(detection_methods.items())[:3]:
                    print(f"   - {method}: {details.get('confidence', 'Unknown')}")
            else:
                print(f"‚ùå Capabilities failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Capabilities error: {e}")
        
        # Test 3: Reverse search only
        print("\n3. Testing reverse search endpoint...")
        test_image_url = "https://via.placeholder.com/400x400.png?text=Test+Image"
        try:
            response = await client.post(
                f"{BASE_URL}/analyze/reverse-search-only",
                params={"image_url": test_image_url}
            )
            if response.status_code == 200:
                reverse_data = response.json()
                summary = reverse_data.get('summary', {})
                print(f"‚úÖ Reverse search working")
                print(f"   Total matches: {summary.get('total_matches', 0)}")
                print(f"   Risk indicators: {len(summary.get('risk_indicators', []))}")
                print(f"   Confidence: {summary.get('confidence', 0):.2f}")
            else:
                print(f"‚ùå Reverse search failed: {response.status_code}")
                print(f"   Response: {response.text[:200]}")
        except Exception as e:
            print(f"‚ùå Reverse search error: {e}")
        
        # Test 4: Metadata analysis only
        print("\n4. Testing metadata analysis endpoint...")
        try:
            response = await client.post(
                f"{BASE_URL}/analyze/metadata-only",
                params={"image_url": test_image_url}
            )
            if response.status_code == 200:
                metadata_data = response.json()
                summary = metadata_data.get('summary', {})
                print(f"‚úÖ Metadata analysis working")
                print(f"   EXIF available: {summary.get('exif_available', False)}")
                print(f"   GPS data: {bool(summary.get('gps_coordinates'))}")
                print(f"   Risk score: {summary.get('risk_score', 0)}")
            else:
                print(f"‚ùå Metadata analysis failed: {response.status_code}")
                print(f"   Response: {response.text[:200]}")
        except Exception as e:
            print(f"‚ùå Metadata analysis error: {e}")
        
        # Test 5: Full Instagram analysis (this will take longer)
        print("\n5. Testing full Instagram analysis with Session 3...")
        test_instagram_url = "https://www.instagram.com/p/test123/"  # This will use fallback data
        try:
            response = await client.post(
                f"{BASE_URL}/analyze/instagram",
                json={
                    "post_url": test_instagram_url,
                    "include_reverse_search": True,
                    "include_metadata_analysis": True
                }
            )
            if response.status_code == 200:
                analysis_data = response.json()
                print(f"‚úÖ Full analysis working")
                print(f"   Misinformation score: {analysis_data.get('misinformation_score', 0):.1f}%")
                print(f"   Confidence level: {analysis_data.get('confidence_level', 'Unknown')}")
                print(f"   Detection methods used: {len(analysis_data.get('modality_scores', {}))}")
                
                # Show comprehensive detection breakdown
                metadata_info = analysis_data.get('metadata_info', {})
                comprehensive = metadata_info.get('comprehensive_detection', {})
                if comprehensive:
                    print(f"   Methods breakdown:")
                    method_breakdown = comprehensive.get('method_breakdown', {})
                    for method, details in list(method_breakdown.items())[:3]:
                        print(f"     - {method}: {details.get('score', 0):.1f}% ({details.get('description', 'No description')[:50]}...)")
                
                print(f"   Inconsistencies found: {len(analysis_data.get('detected_inconsistencies', []))}")
                
            else:
                print(f"‚ùå Full analysis failed: {response.status_code}")
                print(f"   Response: {response.text[:300]}")
        except Exception as e:
            print(f"‚ùå Full analysis error: {e}")
        
        # Test 6: Root endpoint (shows Session 3 features)
        print("\n6. Testing root endpoint...")
        try:
            response = await client.get(f"{BASE_URL}/")
            if response.status_code == 200:
                root_data = response.json()
                print(f"‚úÖ Root endpoint working")
                print(f"   Version: {root_data.get('version', 'Unknown')}")
                features = root_data.get('session_3_features', [])
                print(f"   Session 3 features: {len(features)}")
                for feature in features[:3]:
                    print(f"     - {feature}")
                if len(features) > 3:
                    print(f"     - ... and {len(features) - 3} more")
            else:
                print(f"‚ùå Root endpoint failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Root endpoint error: {e}")

async def test_detection_methods():
    """Test individual detection methods"""
    
    print("\n" + "=" * 50)
    print("üîç Testing Individual Detection Methods")
    print("=" * 50)
    
    # Test different scenarios
    test_scenarios = [
        {
            "name": "Stock Photo Test",
            "url": "https://www.instagram.com/p/test_stock/",
            "expected": "Should detect potential stock photo misuse"
        },
        {
            "name": "Temporal Mismatch Test", 
            "url": "https://www.instagram.com/p/test_temporal/",
            "expected": "Should detect temporal inconsistencies"
        },
        {
            "name": "Authentic Content Test",
            "url": "https://www.instagram.com/p/test_authentic/", 
            "expected": "Should show low misinformation score"
        }
    ]
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"\n{i}. {scenario['name']}")
            print(f"   Expected: {scenario['expected']}")
            
            try:
                response = await client.post(
                    f"{BASE_URL}/analyze/instagram",
                    json={
                        "post_url": scenario["url"],
                        "include_reverse_search": True,
                        "include_metadata_analysis": True
                    }
                )
                
                if response.status_code == 200:
                    data = response.json()
                    score = data.get('misinformation_score', 0)
                    confidence = data.get('confidence_level', 'Unknown')
                    
                    print(f"   ‚úÖ Result: {score:.1f}% misinformation risk ({confidence} confidence)")
                    
                    # Show which methods detected issues
                    inconsistencies = data.get('detected_inconsistencies', [])
                    if inconsistencies:
                        print(f"   üîç Issues detected:")
                        for issue in inconsistencies[:2]:
                            print(f"     - {issue[:80]}...")
                    else:
                        print(f"   ‚ú® No major issues detected")
                        
                else:
                    print(f"   ‚ùå Failed: {response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå Error: {e}")

def print_session3_summary():
    """Print Session 3 feature summary"""
    
    print("\n" + "=" * 50)
    print("üìã Session 3 Feature Summary")
    print("=" * 50)
    
    features = [
        "‚úÖ Multi-engine reverse image search (Google, TinEye, Bing)",
        "‚úÖ EXIF metadata extraction and forensic analysis",
        "‚úÖ Enhanced temporal inconsistency detection", 
        "‚úÖ Cross-source verification and authenticity checking",
        "‚úÖ 6 total detection methods integrated",
        "‚úÖ Comprehensive risk scoring with evidence explanation",
        "‚úÖ New dedicated endpoints for reverse search and metadata",
        "‚úÖ Enhanced health checks and system capabilities",
        "‚úÖ Improved Docker setup with Session 3 dependencies",
        "‚úÖ Updated environment configuration for new features"
    ]
    
    for feature in features:
        print(f"  {feature}")
    
    print(f"\nüéØ Detection Methods:")
    methods = [
        "1. CLIP Cross-Modal Consistency Analysis",
        "2. AI Manipulation Detection", 
        "3. Multi-Engine Reverse Image Search",
        "4. EXIF Metadata Forensics",
        "5. Temporal Verification Analysis",
        "6. Engagement Pattern Analysis"
    ]
    
    for method in methods:
        print(f"  {method}")
    
    print(f"\nüöÄ Ready for Session 4: BERT Explanations + AWS Deployment!")

async def main():
    """Run all tests"""
    
    print("üß™ factr.ai Session 3 - Comprehensive Testing Suite")
    print("Testing all reverse search and metadata analysis features")
    print(f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Test basic functionality
    await test_session3_features()
    
    # Test detection methods
    await test_detection_methods()
    
    # Print summary
    print_session3_summary()
    
    print(f"\n‚úÖ Testing completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üöÄ factr.ai Session 3 is ready for production!")

if __name__ == "__main__":
    asyncio.run(main())
